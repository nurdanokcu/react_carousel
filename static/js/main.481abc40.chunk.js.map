{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["Carousel","state","transform","handleButtons","direction","props","images","step","frameSize","itemWidth","infinite","sizeOfHiddenRegion","length","setState","newTransform","Math","min","max","handlePrevButton","handleNextButton","this","animationDuration","className","style","width","map","image","index","transition","src","alt","type","onClick","disabled","React","Component","Form","handleChange","handleInfinite","name","value","onChange","checked","App","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.481abc40.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\ntype State = {\n  transform: number;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    transform: 0,\n  };\n\n  handleButtons = (direction: 'prev' | 'next') => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const sizeOfHiddenRegion = (images.length - frameSize) * itemWidth;\n\n    this.setState((state) => {\n      const newTransform = direction === 'prev'\n        ? Math.min(state.transform + (itemWidth * step), 0)\n        : Math.max(state.transform - (itemWidth * step), -sizeOfHiddenRegion);\n\n      if (newTransform === 0 && direction === 'prev' && infinite) {\n        return { transform: -sizeOfHiddenRegion };\n      }\n\n      if (newTransform === -sizeOfHiddenRegion\n            && direction === 'next'\n            && infinite\n      ) {\n        return { transform: 0 };\n      }\n\n      return { transform: newTransform };\n    });\n  };\n\n  handlePrevButton = () => {\n    this.handleButtons('prev');\n  };\n\n  handleNextButton = () => {\n    this.handleButtons('next');\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { transform } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          className=\"Carousel__list\"\n          style={{ width: `${frameSize * itemWidth}px` }}\n        >\n          {images.map((image, index) => (\n            <li\n              key={image}\n              style={{\n                transform: `translateX(${transform}px)`,\n                transition: `${animationDuration}ms`,\n              }}\n            >\n              <img\n                src={image}\n                alt={`emjoji-${index + 1}`}\n                style={{ width: `${itemWidth}px` }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            onClick={this.handlePrevButton}\n            disabled={transform === 0 && !infinite}\n          >\n            &#8249;\n          </button>\n\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            className=\"Carousel__button\"\n            onClick={this.handleNextButton}\n            // calculated size is sizeOfHiddenRegion\n            disabled={transform === -(images.length - frameSize) * itemWidth\n              && !infinite}\n          >\n            &#8250;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Form.scss';\n\ntype Props = {\n  itemWidth: number;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  images: string[];\n  infinite: boolean;\n  handleInfinite: () => void;\n};\n\nexport const Form:React.FC<Props> = ({\n  itemWidth,\n  handleChange,\n  frameSize,\n  step,\n  animationDuration,\n  images,\n  infinite,\n  handleInfinite,\n}) => (\n  <form className=\"Form\">\n    <label>\n      Item width:\n      <input\n        className=\"Form__input\"\n        type=\"number\"\n        name=\"itemWidth\"\n        value={itemWidth}\n        min=\"100\"\n        max=\"200\"\n        step=\"5\"\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      Frame size:\n      <input\n        className=\"Form__input\"\n        type=\"number\"\n        name=\"frameSize\"\n        value={frameSize}\n        min=\"1\"\n        max={images.length}\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      Step:\n      <input\n        className=\"Form__input\"\n        type=\"number\"\n        name=\"step\"\n        value={step}\n        min=\"1\"\n        max={images.length - frameSize}\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      Animation duration:\n      <input\n        className=\"Form__input\"\n        type=\"number\"\n        name=\"animationDuration\"\n        value={animationDuration}\n        min=\"100\"\n        max=\"5000\"\n        step=\"100\"\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      Infinite:\n      <input\n        className=\"Form__input Form__input--checkbox\"\n        type=\"checkbox\"\n        name=\"infinite\"\n        checked={infinite}\n        onChange={handleInfinite}\n      />\n    </label>\n  </form>\n);\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport { Form } from './components/Form';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(state => ({\n      ...state,\n      [event.target.name]: +(event.target.value),\n    }));\n  };\n\n  handleInfinite = () => {\n    this.setState(state => ({\n      infinite: !state.infinite,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          data-cy=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <Form\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          images={images}\n          infinite={infinite}\n          handleChange={this.handleChange}\n          handleInfinite={this.handleInfinite}\n        />\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}